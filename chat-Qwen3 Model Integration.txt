# Centralized Documentation: ChatBot Version 1

## Table of Contents
1. [Overview](#overview)
2. [Project Structure](#project-structure)
3. [Architecture Overview](#architecture-overview)
4. [Main Features](#main-features)
5. [API & Data Files](#api--data-files)
6. [Data File Formats & Customization](#data-file-formats--customization)
7. [Running & Developing the App](#running--developing-the-app)
8. [Contributing](#contributing)
9. [Troubleshooting](#troubleshooting)
10. [Notes](#notes)

---

## Overview
ChatBot Version 1 is a web-based educational chatbot platform designed to assist users with knowledge quizzes, homework help, art curation, and investigations. The app features a chat interface, multiple knowledge sections, and static as well as dynamic data sources.

---

## Project Structure

- **api/**: Backend API endpoints (e.g., chat logic, Vercel deployment config)
- **data/**: Static data files (e.g., homework, schools)
- **docs/**: Frontend assets (HTML, JS, CSS, images, and data for UI)
- **vercel-proxy/**: (Purpose not detailed; likely for Vercel deployment)
- **config.js**: App configuration
- **logger.js**: Logging utility
- **server.js**: Main server entry point
- **package.json**: Project dependencies and scripts
- **README.md**: Basic project info
- **DOCUMENTATION.md**: Centralized documentation (this file)

---

## Architecture Overview

ChatBot Version 1 follows a modular, layered architecture that separates concerns between the frontend, backend, and data sources:

### 1. Frontend (Client Side)
- Located in the `docs/` directory.
- Built with HTML, JavaScript, and CSS for the user interface.
- Handles user interactions, displays chat, quizzes, and knowledge sections.
- Fetches data and communicates with the backend via HTTP requests (e.g., chat API).
- Loads static data (like quiz questions) directly from files in `docs/data/`.

### 2. Backend (Server Side)
- Main entry point: `server.js`.
- API logic is organized in the `api/` directory (e.g., `api/chat.js`).
- Handles chat requests, processes user input, and retrieves relevant knowledge or responses.
- Can serve static files and act as a bridge between frontend and data sources.
- Uses configuration and logging utilities (`config.js`, `logger.js`).

### 3. Data Sources
- Static JSON and JS files in `data/`, `docs/data/`, and root directory (e.g., `art_knowledge.json`).
- Store knowledge bases, quiz questions, homework, and other content.
- Backend and frontend both access these files as needed (frontend uses only files in `docs/`).

### 4. Deployment
- Designed for easy deployment (e.g., Vercel) with configuration in `vercel.json` and optional proxy logic in `vercel-proxy/`.

### 5. Interaction Flow
- Users interact with the UI in the browser.
- The frontend sends requests to backend APIs for chat and dynamic features.
- The backend processes requests, accesses data sources, and returns responses.
- Static content (quizzes, knowledge) is loaded directly by the frontend from public data files.

This architecture allows for clear separation of concerns, easy customization of data/content, and straightforward extension of features.

---

## Main Features

### 1. Chat Interface
- Real-time chat with the bot via the frontend and backend API.
- Handles user queries and provides responses based on integrated knowledge bases.
- Main logic: `api/chat.js`, `docs/chat.js`, `docs/index.html`.

### 2. Knowledge Quizzes
- Multiple-choice quizzes (e.g., English) for self-assessment.
- Static questions stored in `docs/data/english_questions.js`.
- Feedback provided for each answer.
- To add or edit questions, modify `docs/data/english_questions.js` (see [Data File Formats & Customization](#data-file-formats--customization)).

### 3. Homework Help
- Homework data in `data/homework.json` and `docs/data/homework.json`.
- UI for students to get help with homework questions.
- Main logic: `docs/homework.html`, `docs/data/homework.json`.

### 4. Art Curation
- Art-related knowledge and curation via `art_knowledge.json` and `docs/art.html`.
- Main logic: `docs/art.html`, `art_knowledge.json`.

### 5. Investigations
- Investigation knowledge and UI in `investigations_knowledge.json` and `docs/investigations.html`.
- Main logic: `docs/investigations.html`, `investigations_knowledge.json`.

### 6. Knowledge Base
- General knowledge in `knowledge.json` and `knowledge_knowledge.json`.
- Accessible via the chat and knowledge UI (`docs/knowledge.html`).

---

## API & Data Files
- **api/chat.js**: Main chat API logic.
- **data/homework.json**: Homework questions and answers.
- **data/schools.json**: School data for context.
- **docs/data/english_questions.js**: Static English quiz questions.
- **docs/data/knowledge.json**: Knowledge base for frontend use.
- **art_knowledge.json, investigations_knowledge.json, homework_knowledge.json, knowledge_knowledge.json**: Knowledge sources for different sections.

---

## Data File Formats & Customization

### English Quiz Questions (`docs/data/english_questions.js`)
- Format: Array of objects with `question`, `options`, `answer`, and `feedback` fields.
- Example:
  ```js
  {
    question: "Which word is a synonym for 'happy'?",
    options: ["A) Sad", "B) Angry", "C) Joyful", "D) Tired"],
    answer: "C",
    feedback: "'Joyful' means the same as 'happy'."
  }
  ```
- To add a question, append a new object to the array.

### Homework, Art, Investigations, and Knowledge Files
- JSON format, typically arrays or objects with relevant fields (see each file for structure).
- To add new content, follow the structure of existing entries.

---

## Running & Developing the App
1. Install dependencies: `npm install`
2. Start the server: `node server.js` (or use a script from `package.json`)
3. Access the app via `index.html` in the `docs/` folder.
4. For deployment, see `vercel.json` and `vercel-proxy/`.

---

## Contributing
- Fork or clone the repository.
- Make changes in a feature branch.
- Ensure new features are documented in DOCUMENTATION.md.
- Test your changes locally before submitting a pull request.

---

## Troubleshooting
- If the server does not start, check for missing dependencies (`npm install`).
- For frontend issues, check the browser console for errors.
- For API issues, review logs in `logger.js` and server output.
- Ensure data files are valid JSON/JS.

---

## Notes
- Update this documentation as new features or files are added.
- For detailed API usage, see inline comments in `api/` and `server.js`.
- For UI changes, edit files in `docs/`.
- For quiz logic, see the TODO in `docs/data/english_questions.js` for future improvements (e.g., scoring, result summary).